#ifndef AIQCoreLib_AIQSynchronizationManager_h
#define AIQCoreLib_AIQSynchronizationManager_h

#import <Foundation/Foundation.h>

#import "AIQSynchronization.h"

/*!
 @header AIQSynchronizationManager.h
 @author Marcin Lukow
 @copyright 2012 Appear Networks Systems AB
 @updated 2014-03-20
 @brief AIQSynchronization module can be used to synchronize business documents to and from the backend.
 @version 1.0.4
 */

/** Synchronization cycle will start event name.

 This is the name of the event generated by NSNotificationCenter when AIQSynchronizationManager starts
 the synchronization cycle.

 @since 1.0.0
 */
EXTERN_API(NSString *) const AIQWillSynchronizeEvent;

/** Synchronization cycle has finished event name.

 This is the name of the event generated by NSNotificationCenter when AIQSynchronizationManager has
 finished the synchronization cycle. Note that the outcome of the synchronization may vary. This event
 will be fired after emptying the synchronization request queue.

 @since 1.0.0
 */
EXTERN_API(NSString *) const AIQSynchronizationCompleteEvent;

/** Default synchronization interval.
 
 This is the default interval in which the synchronization will be performed.
 
 @see synchronizationInterval
 @since 1.0.4
 */
EXTERN_API(NSTimeInterval) const AIQSynchronizationInterval;

/** Default synchronization request queue size
 
 This is the default size of queue which stores synchronization requests.
 
 @see queueSize
 @since 1.0.4
 */
EXTERN_API(NSUInteger) const AIQSynchronizationQueueSize;

@interface AIQSynchronizationManager : NSObject

/** Time distance between synchronization processes.
 
 This is time distance between two successful synchronization cycles.
 */
@property (nonatomic, assign) NSTimeInterval synchronizationInterval;

/** Synchronization queue size.
 
 Both automatic and forced synchronization requests are added to the queue. If the number of requests exceed
 this size, every next request will be ignored.
 
 @see AIQSynchronizationQueueSize
 @since 1.0.4
 */
@property (nonatomic, assign) NSUInteger queueSize;

/**---------------------------------------------------------------------------------------
 * @name Initialization
 * ---------------------------------------------------------------------------------------
 */

/** AIQSynchronizationManager module constructor.

 This constructor initializes the AIQSynchronizationManager module for the provided synchronization module.

 @param synchronization AIQSynchronization module instance for which to initialize the module. Must not be nil.
 @param error If defined, will store an error in case of any failure. May be nil.
 @return Initialized AIQSynchronizationManager module or nil if initialization failed, in which case the error parameter will
 contain the reason of failure.

 @since 1.0.4
 */
- (id)initForSynchronization:(AIQSynchronization *)synchronization error:(NSError **)error;

/** Starts the synchronization manager.
 
 This method can be used to start the synchronization manager. Starting a synchronization manager which is
 already running will result in error. Note that the first synchronization will be performed immediately after
 the manager is started. In case synchronization fails, exponential backoff mechanism with ration 2.0 is used
 (e.g. if synchronization interval is set to 30 seconds, first retry will be performed after 15 seconds, second
 after 7.5 seconds, third after 3.75 seconds and then will fall back to initial 30 seconds).
 
 @return YES if it was possible to start the manager, NO otherwise, in which case the error parameter will
 contain the reason of failure.
 @param error If defined, will store an error in case of any failure. May be nil.

 @since 1.0.4
 @see stop:
 @see isRunning:
 */
- (BOOL)start:(NSError **)error;

/** Stops the synchronization manager.
 
 This method can be used to stop the synchronization manager. Stopping a synchronization manager which is not
 running will result in error. Note that stopping the synchronization manager which is in the middle of a
 synchronization process will cause this process to be cancelled.

 @return YES if it was possible to stop the manager, NO otherwise, in which case the error parameter will
 contain the reason of failure.
 @param error If defined, will store an error in case of any failure. May be nil.

 @since 1.0.4
 @see start:
 @see isRunning:
*/
- (BOOL)stop:(NSError **)error;

/** Forces the synchronization.
 
 This method can be used to force the synchronization. If a synchronization process is already running, this
 synchronization request will be queued unless the queue is full, in which case the request will be ignored.
 Note that it is not possible to force synchronization on a synchronization manager which has not been started,
 doing so will result in error.

 @return YES if it was possible to force the synchronization, NO otherwise, in which case the error parameter will
 contain the reason of failure.
 @param error If defined, will store an error in case of any failure. May be nil.

 @since 1.0.4
 @see start:
 @see stop:
 @see isRunning:
 @see isSynchronizing:
 */
- (BOOL)force:(NSError **)error;

- (void)forceWithCompletionHandler:(void (^)(AIQSynchronizationResult))handler;

/** Tells whether the synchronization manager is running.
 
 This method can be used to check if the synchronization manager has been successfully started.
 
 @return YES if the synchronization manager is running, NO otherwise.

 @since 1.0.4
 @see start:
 @see stop
 */
- (BOOL)isRunning;

/** Tells whether the synchronization manager is in the middle of a synchronization process.
 
 This method can be used to check if the synchronization manager is in the middle of a synchronization process.
 
 @return YES if the synchronization manager is in the middle of a synchronization process, NO otherwise.

 @since 1.0.4
 */
- (BOOL)isSynchronizing;

@end

#endif /* AIQCoreLib_AIQSynchronizationManager_h */
